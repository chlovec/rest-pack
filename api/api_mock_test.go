package api

import (
	"errors"
	"net/http"
	"testing"

	"github.com/golang/mock/gomock"
	"github.com/stretchr/testify/assert"
)

func TestMockAPIServerInterface(t *testing.T) {
	t.Run("should start successfully with registered routes", func(t *testing.T) {
		// Define a test handler
		testHandler := func(w http.ResponseWriter, r *http.Request) {
			w.WriteHeader(http.StatusOK)
			w.Write([]byte("Hello, World!"))
		}
		
		ctrl := gomock.NewController(t) // Create a mock controller
		defer ctrl.Finish()             // Ensure that all expectations are met by the end of the test

		// Create the mock for APIServerInterface (generated by mockgen)
		mockAPIServer := NewMockAPIServerInterface(ctrl)

		// Define the behavior for the mock
		mockAPIServer.EXPECT().RegisterRoute("/products", gomock.Any(), "GET").Times(1)
		mockAPIServer.EXPECT().Start(gomock.Any()).Return(nil).Times(1)

		mockAPIServer.RegisterRoute("/products", testHandler, "GET")
		err := mockAPIServer.Start(0)
		assert.NoError(t, err)
	})

	t.Run("should start successfully with no registered routes", func(t *testing.T) {
		
		ctrl := gomock.NewController(t)
		defer ctrl.Finish()

		mockAPIServer := NewMockAPIServerInterface(ctrl)
		mockAPIServer.EXPECT().Start(gomock.Any()).Return(nil).Times(1)
		err := mockAPIServer.Start(0)
		assert.NoError(t, err)
	})

	t.Run("should return mocked error", func(t *testing.T) {
		
		ctrl := gomock.NewController(t)
		defer ctrl.Finish()
		
		mockAPIServer := NewMockAPIServerInterface(ctrl)
		mockAPIServer.EXPECT().Start(gomock.Any()).Return(errors.New("Internal Server Error")).Times(1)
		err := mockAPIServer.Start(0)
		assert.Error(t, err)
		assert.Equal(t, "Internal Server Error", err.Error())
	})
}
