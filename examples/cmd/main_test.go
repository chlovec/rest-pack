package main

import (
	"bytes"
	"database/sql"
	"errors"
	"log"
	"testing"
	"time"

	"github.com/DATA-DOG/go-sqlmock"
	"github.com/chlovec/rest-pack/api"
	"github.com/golang/mock/gomock"
	"github.com/stretchr/testify/assert"
)

// TestRun tests the run function
func TestRun_Success(t *testing.T) {
	ctrl := gomock.NewController(t) // Create a mock controller
	defer ctrl.Finish() // Ensure that all expectations are met by the end of the test

	// Create the mock for APIServerInterface (generated by mockgen)
	mockAPIServer := api.NewMockAPIServerInterface(ctrl)

	// Define the behavior for the mock
	mockAPIServer.EXPECT().RegisterRoute("/products", gomock.Any(), "GET").Times(1)
	mockAPIServer.EXPECT().RegisterRoute("/products", gomock.Any(), "POST").Times(1)
	mockAPIServer.EXPECT().Start(gomock.Any()).Return(nil).Times(1)

	// Create a mock database connection
	mockDB, mock, err := sqlmock.New(sqlmock.MonitorPingsOption(true))
	assert.NoError(t, err)
	defer mockDB.Close()

	// Mock the PingContext behavior to succeed
	mock.ExpectPing()

	// Override sqlOpen to return the mock database
	mockSQLOpen := func(driverName, dataSourceName string) (*sql.DB, error) {
		return mockDB, nil
	}

	// Create a bytes buffer to capture logs
	var logBuffer bytes.Buffer
	mockLogger := log.New(&logBuffer, "", log.LstdFlags) // Redirect log output to the buffer

	// Call the function under test
	err = run(mockAPIServer, mockSQLOpen, "mock-dsn", mockLogger, 5*time.Second)
	assert.NoError(t, err)

	// Verify that the expected log message was written
	logContents := logBuffer.String()
	assert.Contains(t, logContents, "Initialized DB!")
}

func TestRun_InitDBError(t *testing.T) {
	ctrl := gomock.NewController(t) // Create a mock controller
	defer ctrl.Finish() // Ensure that all expectations are met by the end of the test

	// Create the mock for APIServerInterface (generated by mockgen)
	mockAPIServer := api.NewMockAPIServerInterface(ctrl)

	// Create a mock database connection (sqlmock)
	mockDB, mock, err := sqlmock.New(sqlmock.MonitorPingsOption(true))
	assert.NoError(t, err)
	defer mockDB.Close()

	// Mock the behavior of InitDB to return an error
	mock.ExpectPing().WillReturnError(errors.New("failed to connect to DB"))

	// Override sqlOpen to return the mock database
	mockSQLOpen := func(driverName, dataSourceName string) (*sql.DB, error) {
		return nil, errors.New("mock InitDB error") // Simulate InitDB returning an error
	}

	// Create a bytes buffer to capture logs
	var logBuffer bytes.Buffer
	mockLogger := log.New(&logBuffer, "", log.LstdFlags) // Redirect log output to the buffer

	// Call the function under test
	err = run(mockAPIServer, mockSQLOpen, "mock-dsn", mockLogger, 5*time.Second)
	assert.Error(t, err)
	assert.Equal(t, "mock InitDB error", err.Error())
}

func TestRun_ServerStartError(t *testing.T) {
	ctrl := gomock.NewController(t) // Create a mock controller
	defer ctrl.Finish() // Ensure that all expectations are met by the end of the test

	// Create the mock for APIServerInterface (generated by mockgen)
	mockAPIServer := api.NewMockAPIServerInterface(ctrl)

	// Define the behavior for the mock
	mockAPIServer.EXPECT().RegisterRoute("/products", gomock.Any(), "GET").Times(1)
	mockAPIServer.EXPECT().RegisterRoute("/products", gomock.Any(), "POST").Times(1)
	mockAPIServer.EXPECT().Start(gomock.Any()).Return(errors.New("failed to start server")).Times(1)

	// Create a mock database connection (sqlmock)
	mockDB, mock, err := sqlmock.New(sqlmock.MonitorPingsOption(true))
	assert.NoError(t, err)
	defer mockDB.Close()

	// Mock the PingContext behavior to succeed
	mock.ExpectPing()

	// Override sqlOpen to return the mock database
	mockSQLOpen := func(driverName, dataSourceName string) (*sql.DB, error) {
		return mockDB, nil
	}

	// Create a bytes buffer to capture logs
	var logBuffer bytes.Buffer
	mockLogger := log.New(&logBuffer, "", log.LstdFlags) // Redirect log output to the buffer

	// Call the function under test
	err = run(mockAPIServer, mockSQLOpen, "mock-dsn", mockLogger, 5*time.Second)
	assert.Error(t, err)
	assert.Equal(t, "failed to start server", err.Error())
	

	// Verify that the error was logged
	logContents := logBuffer.String()
	assert.Contains(t, logContents, "Initialized DB")
}
